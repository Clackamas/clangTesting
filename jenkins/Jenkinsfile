#!/usr/bin/env groovy

pipeline {
   agent any
   stages {
       stage('Checkout') {
           steps {
               echo "Checking out the code now!"
               echo "scm.branches = ${scm.branches}"
               echo "env.GIT_BRANCH = ${env.GIT_BRANCH}"
               checkout([
                   $class: 'GitSCM',
                   branches: scm.branches,
                   doGenerateSubmoduleConfigurations: false,
                   userRemoteConfigs: scm.userRemoteConfigs
               ])
           }
       }
       stage('Static Analysis') {
           steps {
               echo "DEBUG (before): ${currentBuild.currentResult}"
               echo "Running Code Analysis Now!"
               sh 'rm -f clang-tidy-output.txt'
               dir('src') {
                   sh 'clang-tidy -checks=\'*\' -header-filter=\'.*\' -p . *.cpp -- -std=c++98 > ../clang-tidy-output.txt'
               }
               script {
               if( fileExists('clang-tidy-output.txt') ) { 
                   new File(env.WORKSPACE,'clang-tidy-output.txt').withWriter('UTF-8') { file ->
                       if( file.size() == 0 ) {
                           file.writeLine('Pass')
                       }
                   }
               }
               }
               recordIssues(
                   failOnError: true,
                   enabledForFailure: true,
                   aggregatingResults: true,
                   //filters: [ excludeFile( '.*\\.crt') ],
                   //filters: [ excludeFile( 'ssl/*') ],
                   qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true ]],
                   tools: [clangTidy(
                       pattern: 'clang-tidy-output.txt',
                       reportEncoding: 'UTF-8'
                   )]
               )   
               echo "DEBUG (after): ${currentBuild.currentResult}"
               //script {
               //    if( currentBuild.currentResult == 'UNSTABLE' ) {
               //        error("Build is marked as unstable.  Failing build due to clang-tidy warnings.")
               //    }
               //}
           }
       }
       stage('CMake') {
           steps {
               echo "Running CMake now!"
               sh 'rm -rf cmake-build'
               sh 'mkdir -p cmake-build'
               dir('cmake-build') {
                   sh 'cmake ..'
               }
           }
       }
       stage('Build') {
           steps {
               echo "Building the app now!"
               dir('cmake-build') {
                   sh 'make install'
               }
           }
       }
   }
}
