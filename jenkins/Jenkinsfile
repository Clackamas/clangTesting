#!/usr/bin/env groovy

pipeline {
   agent any
   stages {
       stage('Checkout') {
           steps {
               echo "Checking out the code now!"
               checkout([
                   $class: 'GitSCM',
                   branches: [[ name: '*/master' ]],
                   userRemoteConfigs: scm.userRemoteConfigs
               ])
           }
       }
       stage('Static Analysis') {
           steps {
               echo "DEBUG (before): ${currentBuild.currentResult}"
               echo "Running Code Analysis Now!"
               sh 'rm -f clang-tidy-output.txt'
               dir('src') {
                   sh 'clang-tidy -checks=\'*\' -header-filter=\'.*\' -p . *.cpp -- -std=c++98 > ../clang-tidy-output.txt'
               }
                   recordIssues(
                       failOnError: false,
                       aggregatingResults: true,
                       enabledForFailure: false,
                       filters: [ excludeFile( '**/*.crt') ],
                       qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true ]],
                       tools: [clangTidy(
                           pattern: 'clang-tidy-output.txt',
                           reportEncoding: 'UTF-8'
                       )]
                   )   
               echo "DEBUG (after): ${currentBuild.currentResult}"
               script {
                   if( currentBuild.currentResult == 'UNSTABLE' ) {
                       error("Build is marked as unstable.  Failing build due to clang-tidy warnings.")
                   }
               }
           }
       }
       stage('CMake') {
           steps {
               echo "Running CMake now!"
               sh 'rm -rf cmake-build'
               sh 'mkdir -p cmake-build'
               dir('cmake-build') {
                   sh 'cmake ..'
               }
           }
       }
       stage('Build') {
           steps {
               echo "Building the app now!"
               dir('cmake-build') {
                   sh 'make install'
               }
           }
       }
   }
}
