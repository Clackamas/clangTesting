#!/usr/bin/env groovy

pipeline {
   agent any
   stages {
       stage('Checkout') {
           steps {
               echo "Checking out the code now!"
               checkout([
                   $class: 'GitSCM',
                   branches: [[ name: '*/master' ]],
                   userRemoteConfigs: scm.userRemoteConfigs
               ])
           }
       }
       stage('Static Analysis') {
           steps {
               echo "DEBUG (before): ${currentBuild.result}"
               echo "Running Code Analysis Now!"
               sh 'rm -f clang-tidy-output.txt'
               sh 'clang-tidy -checks=\'*\' -header-filter=\'.*\' -p . src/*.cpp -- -std=c++98 > clang-tidy-output.txt'
               recordIssues(
                   //healthy: 1,
                   failOnError: false,
                   aggregatingResults: true,
                   enabledForFailure: false,
                   qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true ]],
                   tools: [clangTidy(
                       pattern: 'clang-tidy-output.txt',
                       reportEncoding: 'UTF-8'
                   )]
               )  
               echo "DEBUG (after): ${currentBuild.currentResult}"
               echo "DEBUG (after): ${currentBuild.result}"
               if( currentBuild.result == 'UNSTABLE' ) {
                   currentBuild.result = 'FAILURE'
               }
           }
       }
       stage('CMake') {
           steps {
               echo "Running CMake now!"
               sh 'rm -rf cmake-build'
               sh 'mkdir -p cmake-build'
               dir('cmake-build') {
                   sh 'cmake ..'
               }
           }
       }
       stage('Build') {
           steps {
               echo "Building the app now!"
               dir('cmake-build') {
                   sh 'make install'
               }
           }
       }
   }
}
